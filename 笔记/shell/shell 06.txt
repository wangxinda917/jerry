回顾
sed  非交互式,修改文本
awk  精确搜索,提取信息,还能二次处理
awk 选项  (条件)指令   被处理文本
前置指令 | awk 选项  (条件)指令
条件: 1正则, ~  !~
	2使用数字,字符串 == != > < >= <=
	3逻辑组合  &&    ||
	4运算
内置变量:  $1 $2 $3 .... $0   NR行号  NF列号

----------------------------------------------
在awk中使用if判断:
awk -F: '{if($3<10){x++}}END{print x}' user   使用单分支, 如果第3列小于10,就把x+1,最后输出x的值
awk -F: '{if($3>=1000){x++}}END{print x}' /etc/passwd   使用单分支
awk -F: '{if($3>=1000){x++}else{y++}}END{print x,y}' /etc/passwd   使用双分支, 如果第3列大于等于10,把x+1,否则y+1, 最后输出x和y的值
awk -F: '{if($1~/root/){x++}else{y++}}END{print x,y}' /etc/passwd  如果第1列包含root,把x+1,否则y+1,最后输出这些值

-------------------------------------

awk数组 ,数组可以理解为能存储多个值的特殊变量
使用方法 : 数组名[下标]=值

awk 'BEGIN{a[1]=100;a[2]=200;print a[1]}'  定义两个数组,并输出其中一个
awk 'BEGIN{a[1]=100;a[2]=200;print a[2]}'
awk 'BEGIN{a[88]=100;a[2]=200;print a[1]}'  下标不存在,无任何输出
awk 'BEGIN{a[88]=100;a[2]=200;print a[88]}' 修改了下标,输出时也修改

awk 'BEGIN{abc["a"]=100;abc["b"]="xyz";print abc["a"],abc["b"]}'  下标和值不仅可以用数字, 其他字符也可以,但要加双引号
awk 'BEGIN{abc["192.168.0.1"]=100;abc["192.168.0.2"]="xyz";print abc["192.168.0.2"]}'
下标与值定义都比较自由
-----------------------------------------------------------------------
awk数组中使用for循环遍历数组
for(变量名称  in 数组名称){执行指令}

awk 'BEGIN{abc[1]=10;abc[2]=20;for(i in abc){print i }}'   定义数组abc,分别有2个下标和2个值,然后交给for循环输出下标
awk 'BEGIN{abc[1]=10;abc[2]=20;for(i in abc){print abc[i] }}'  定义数组abc,分别有2个下标和2个值,然后交给for循环输出值
awk 'BEGIN{abc[1]=10;abc[2]=20;for(i in abc){print i,abc[i] }}'   下标和值都输出

总结: for循环在遍历数组时的变量是下标,而不是值!

a[abc]++    a[abc]=1
a[abc]++    a[abc]=2
a[xyz]++    a[xyz]=1
a[opq]++    a[opq]=1
a[abc]++    a[abc]=3
a[opq]++    a[opq]=2

a[abc]=3
a[opq]=2
a[xyz]=1

awk '{a[$1]++}END{for(i in a){print i}}' abc   使用awk数组+for循环, 显示abc中不同的行

awk '{a[$1]++}END{for(i in a){print i,a[i]}}' abc  使用awk数组+for循环, 显示abc中不同的行以及这行出现了几次
---------------------------------
[root@server0 opt]# cat abc
abc 192.168.0.10
abc 192.168.0.10
xyz 192.168.0.20
opq 192.168.0.30
abc 192.168.0.10
opq 192.168.0.30

awk '{ip[$2]++}END{for(i in ip){print i,ip[i]}}' abc
----------------------------------
使用awk统计网站访问量:
1,安装httpd服务
yum -y install httpd
2,开启服务,将防火墙临时关闭
systemctl restart httpd
systemctl stop firewalld
3,使用其他主机访问该网站,每次访问的记录会存在网站日志中
curl http://172.25.0.11
4,查看/var/log/httpd/access_log保存了客户的访问记录
tail -1 curl http://172.25.0.11
5,使用awk统计访问次数
awk '{ip[$1]++}END{for(i in ip){print ip[i],i}}' access_log     统计次数,以及访问者的ip

awk '{ip[$1]++}END{for(i in ip){print ip[i],i}}' access_log  | sort -n -r    统计次数,以及访问者的ip,并排序

sort命令可以用来排序  -n是以数字排序   -r是降序

ab -n 1000 -c 1 http://172.25.0.11/   增加访问记录,然后在使用awk输出信息查看
----------------------------------
#!/bin/bash
while :
do
uptime |awk '{print "cpu的平均负载是"$10 , $11 ,$12}'
ifconfig eth0 |awk '/RX p/{print "主机eth0网卡的接收流量是"$5"字节"}'
ifconfig eth0 |awk 'NR==7{print "主机eth0网卡的发送流量是"$5"字节"}'
free -h |awk '/Mem/{print "主机内存剩余容量是"$4}'
df -h | awk '/vda1/{print "主机根分区 剩余容量是"$4}'
awk 'END{print "计算机的用户数量是"NR"个"}' /etc/passwd
uptime | awk '{print "当前登录用户数量是" $6}'
p=`ps aux | wc -l`
echo "主机运行的进程数量是$p个"
m=`rpm -qa | wc -l`
echo "本机已经安装的软件包数量是$m个"
sleep 3
clear
done
------------------------------------------
awk '/Failed password/{print $11}' /var/log/secure  | awk '{ip[$1]++}END{for(i in ip){print ip[i],i}}' | awk '$1>3{print $2}'
------------------------------------------
编写脚本, 监控主机,当有人尝试访问本机输入密码失败超过3次后发邮件通知管理员
#!/bin/bash
x=`awk '/Failed/{ip[$11]++}END{for(i in ip){print ip[i]","i} }' /var/log/secure`    先使用awk找出次数,ip
for l in $x     将找出的次数与ip交给for循环
do
        h=${l%,*}     去尾,得到次数
        p=${l#*,}	  掐头,得到ip
        [ $h -gt 3 ] && echo "$p访问本机输入密码错误$h次" | mail -s test root      如果次数大于3,发邮件把ip通知管理员
done













