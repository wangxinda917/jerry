ip  172.40.50.117  
vnc 7000

庞丽静
邮箱 panglj@tedu.cn  中心名-nsd1908-姓名
		      
		      

ftp://172.40.50.117/nsd1908/all_note.txt
软件 真机/linux-soft/03/
第3阶段课程内容
			RDBMS1  数据库基础 day05
			RDBMS2  数据库进阶
					   mysql

			NoSQL   非关系型数据库 redis

			securiyt 安全与监控     Zabbix

工作岗位：数据库管理员  DBA  linux运维 IDC


不迟到 不早退 ，  认真听讲 专心做实验 

重要的命令  例子步骤   all_note.txt 文件

++++++RDBMS1_DAY01
一 、相关概念
二、 搭建数据库服务器 
三、数据库服务基本使用
	3.1 连接数据服务器的方式 
		mysql -h数据库服务器ip  -u用户  -p密码 
	3.2 把数据存储到服务的流程
		建立连接
		建库
		建表
		插入记录
		断开连接
	3.3 sql命令 使用规则 
	3.4 库管理命令
	3.5 表管理命令
mysql> create database db1;
mysql> create table  db1.sutinfo(name char(15) , homedir char(20), class char(7) );

mysql> use db1;
mysql> show tables;

mysql> desc sutinfo;
mysql> select  * from sutinfo;

	3.6 表记录管理
		插入表记录
mysql> insert into  db1.sutinfo  values ("bob","usa","nsd1908"),("lilei" , "china" ,"nsd1907");

		查看表记录
select  *  from db1.sutinfo;

		修改字段值（表头的值）
mysql> update db1.sutinfo set homedir="beijing" ;
mysql> update db1.sutinfo set homedir="shanghai" where name="lilei";

		删除表记录
mysql> delete  from  db1.sutionfo;
mysql> show tables;
mysql> drop  table sutinfo;

mysql> use db1;

mysql> create table 学生表(姓名 char(10) , 地址  char(100) )DEFAULT CHARSET=utf8 ;


mysql> show create table 学生表;


mysql> insert into  学生表 values ("张三丰","武当山");

mysql> select  * from  学生表;

四、数据类型
	4.1 字符类型 char / varchar  /text  / blob

mysql> create table t3 (name char(5) ,mail varchar(50));
mysql> desc  t3;
mysql> insert into db1.t3 values ("jerry","jerry@163.com" );

mysql> insert into db1.t3 values ("jerrya","jerry@163.com" );
ERROR 1406 (22001): Data too long for column 'name' at row 1

mysql> insert into db1.t3 values ("jim","jerry@163.com" );
mysql> select  * from db1.t3;

mysql> desc mysql.user;

	4.2 数值类型
create table db1.t2(stu_num  int , name  char(5) , 
age tinyint unsigned , pay float , money float(5,2) );

mysql> desc db1.t2;

mysql> desc mysql.user;
mysql> insert into db1.t2 values (3,"bob",19 ,22222,999.99);
mysql> insert into db1.t2 values (1,"tom",19.5 ,22222,88);
mysql> insert into db1.t2 values (1,"jerry",19.5 ,22222,1.25);
mysql> select  * from db1.t2;

	4.3 日期时间类型

mysql> create table db1.t4( name char(5) , your_start year , up_time time ,birthday  date  , party datetime);

mysql> desc  db1.t4;

mysql> insert into  db1.t4 values ("bob" , 1990 ,083000 ,20191120 ,20191224203000);

mysql>  select  *  from db1.t4 ;

ql> insert into  db1.t4 values ("tom" , 1990 ,curtime() ,20191120 ,now());

mysql> select  * from  db1.t4; 

mysql> select now();
mysql> select month( now() );
mysql> select  year( now() );

	4.4 枚举类型（给字段赋值时 值值能在类型列举的范围内选择）
		enum(值1，值2, 值3 ) 单选
		set(值1，值2, 值3 ) 多选


mysql> create table t5(name char(5) ,sex  enum("boy","girl","no") );

mysql> desc t5;

mysql> insert into  t5 values ( "john" ,"man" ) ;
ERROR 1265 (01000): Data truncated for column 'sex' at row 1

mysql> 
mysql> insert into  t5 values ( "john" ,"boy" ) ;

mysql> create  table  t6 ( name  char(5), likes set("eat","sleep","game","drink") );


mysql> desc t6;

mysql> insert into  t6 values ("jerry","eat,sleep,drink");

mysql> insert into  t6 values ("lucy","eat,sleep,money");
ERROR 1265 (01000): Data truncated for column 'likes' at row 1

字符类型   数值类型  日期时间类型  枚举类型

日期时间类型 year   datetime / timestamp
             xxxx

当使用2位数给year类型字段赋值遵循如下规律：
01~69视为  2001~2069
70~99视为  1970~1999

mysql> select  your_start from t4;
mysql> insert into  t4(your_start)values (58),(88);
mysql> select  your_start from t4;


datetime / timestamp 的 区别：
当未给timestamp字段赋值时，自动以当前系统时间赋值，而datetime 值为 NULL (空)

mysql> create table  t7 ( party  datetime , meetting  timestamp  );
mysql> insert into t7  values (20191107091328 , 20191224203000);
mysql> insert into  t7(party) value(20171225214548);
mysql> insert into  t7(meeting) value(20151225214548);
mysql> select  * from t7;


课后练习
1 创建 before_pop (前任信息) 自己定义表结构 


2 搭建3台数据库服务器
192.168.4.51 
192.168.4.52 
192.168.4.53
 
+++++++RDBMS1_DAY02
一、表结构
	2.1 约束条件
mysql> use db1;
mysql> create table  t77 ( name  char(10) not null ,
    -> age  tinyint unsigned  default 19,
    -> class char(7) not null default "nsd1908",
    -> up_time time
    -> );

mysql> desc  t77;

mysql> insert into t77(name,up_time) values("john",083000);
mysql> insert into t77 values ("null" , 21 , "null" , null);
	
	2.2 修改表结构
mysql> alter table  db1.t6  
       add mail varchar(50) default  "stu@tedu.cn",
       add sex  enum("m","w") default "m";
	
mysql> alter table  db1.t6 
       add age  int  after name , add stu_num char(9) first;


mysql> alter table   db1.t6 modify  stu_num varchar(9);

mysql> alter table  db1.t6  modify age int after likes;
	
mysql> alter table   db1.t6 
       change sex 性别 enum('m','w') not null default "m" ;

mysql> alter table  db1.t6 drop likes , drop mail;

mysql> alter table  t6 rename  信息表;




二、mysql键值 
	2.1 普通索引 index
		1 什么是索引
		2 索引优点与缺点
		3 为什么要使用索引
		4 使用索引
			查看
			创建： 已有表里创建/建表是创建
			删除
		5 索引使用规则?

  	2.2 主键 primary key
		1 使用规则

		字段值不允许重复，且不允许赋NULL值
	      一个表中只能有一个primary  key字段
               多个字段都作为主键，称为复合主键，必须一起创建。
		通常与 auto_increment 连用,让字段使用自增长方式赋值 
 		主键字段的标志是PRI             
		
		2 创建主键
mysql> use db2;

mysql> create table  t2 (
    -> name char(10) primary key, class char(9) );

mysql> create table  t3 ( 
      name char(10) , class char(9) , primary key(name) );

		3 添加主键
mysql> delete from db1.t4;
mysql> alter table db1.t4  add  primary key(name);
mysql> desc db1.t4;
mysql> insert into db1.t4(name) values(null);
mysql> insert into db1.t4(name) values("null");
mysql> insert into db1.t4(name) values("bob");
mysql> insert into db1.t4(name) values("bob");
mysql> insert into db1.t4(name) values("bob22");
	
		4 删除主键
mysql> alter table db1.t4  drop  primary key	
mysql> insert into db1.t4(name) values("bob22");

		5复合主键(多个字段一起做主键,字段的值不同时重复就可以)，必须一起创建。
	
mysql> create table t4 ( cip char(15) , sername char(20) , serport smallint , status enum("yes","no") ,primary key ( cip , serport ) ) ;

mysql> desc t4;

insert into t4 values ("1.1.1.1" , "ssh" , 22 , "yes") ;
insert into t4 values ("2.1.1.1" , "ssh" , 22 , "yes") ;
insert into t4 values ("2.1.1.1" , "ftp" , 21 , "no") ;

mysql> alter  table  t4 drop primary key ;

mysql> desc  t4;

		6 主键通常与 auto_increment 连用,实现字段的自增长赋值


mysql> create table  t5 ( id  int  primary key  auto_increment  , name char(10) , age  tinyint );


mysql> insert into  t5 (name , age ) values ("bob",21);
mysql> insert into  t5 (name , age ) values ("jim",17);
	2.3 外键 foreign key

mysql> create table  yg(
      yg_id int primary key auto_increment ,
      name char(10)
      )engine=innodb;

mysql> insert into yg(name) values("jerry");
mysql> insert into yg(name) values("tom");
mysql> insert into yg(name) values("tom");
mysql> select  * from yg;

mysql> create table  gz ( 
       gz_id  int  , 
       gz int , 
       foreign key(gz_id) references yg(yg_id) 
       on update cascade  on delete cascade
       )engine=innodb ;

    mysql> show create table gz\G;

mysql> alter table  gz drop foreign key gz_ibfk_1 ;

mysql> alter table  gz 
    -> add
    -> foreign key(gz_id) references yg(yg_id)
    -> on update cascade on delete cascade ;


mysql> insert into gz values (1,30000);
mysql> insert into gz values (2,40000);
mysql> insert into gz values (3,45000);

ql> insert into gz values (4,50000);
ERROR 1452 (23000): Cannot add or update a child row: a foreign key constraint fails (`db2`.`gz`, CONSTRAINT `gz_ibfk_1` FOREIGN KEY (`gz_id`) REFERENCES `yg` (`yg_id`) ON DELETE CASCADE ON UPDATE CASCADE)
mysql>

mysql> update yg set yg_id=11 where yg_id=1;
mysql> delete from  yg where yg_id=4;
mysql> select  * from yg;
mysql> select  * from gz;

mysql> alter table  gz add primary key (gz_id);


+++++++++RDBMS1_DAY03 
一 数据导入导出
	1.1 检索目录:文件存放的目录
		查看目录
		自定义

	1.2 数据导入 ： 把系统文件的内容存储到库的表里

	1.3 数据导出:把表记录存储到系统文件里
		
		

二、管理表记录
	2.1 插入表记录
insert into  db3.user  values (22,"bob","x",2019,2019,"test user","/home/bob","/bin/bash");

insert into  db3.user  
values 
(23,"bob2","x",2039,2019,"test user","/home/bob2","/bin/bash"),(24,"bob3","x",2029,2019,"test user","/home/bob3","/bin/bash");

mysql> insert into  db3.user (name, uid ) 
       values ("jerry",2069;)

mysql> insert into  db3.user (name, uid ) 
       values ("tom",2039),("lucy",2089);

       2.2 查询表记录 select  
select  字段1, .. .., 字段N  from  库名.表名 [ where   条件表达式 ] ; 

select  * from  db3.user;

select  id , name , shell  from  db3.user ;

select  id , name , shell  from  db3.user where id <= 3 ; 

        2.3 更新表记录
update   库名.表名  set  字段名=值,字段名=值,字段名=值[  where    条件表达式] ;
mysql> update  user set password="x" , coment="root" where name="root";

update   库名.表名  set  字段名=值,字段名=值,字段名=值;
mysql> update  user set password="a" , coment="stu" ;

	删除表记录
	delete from  库名.表名;
	delete from  库名.表名 where 条件表达式;
	mysql> select  * from  user where  id >=22 ;

三、匹配条件 
	3.1 基本匹配条件 select / update  /delete
		1 数值比较
mysql> select  name , uid ,gid from user   where  uid = gid ;

mysql> select  name , uid ,gid from user  where uid != gid;

mysql> select  name , uid ,gid from user  where uid = 3;

		2 字符比较/匹配空/非空
mysql> select name from user where name =  "apache" ;

mysql> select name from user where name =  "mysql" ;

mysql> select name , shell from user  where shell !=  "/bin/bash";

mysql> select name , shell from user  where shell =  "/bin/bash";

mysql> insert into  user(id , name )values(22,null);

mysql> select id ,  name from user where name is null;
mysql> select id ,  name from user where name is not null;

		3  逻辑匹配
mysql> select  * from user 
       where uid = 0  and  name="root" and shell = "/bin/bash";

mysql> select  * from user 
        where uid < 3  or  shell != "/bin/bash" ;

		4 范围匹配/去重显示
mysql> select name from user 
    -> where name  in  ("sync","bin","http","root") ;

mysql> select name , shell  from user  where shell not in ("/bin/bash" ,"/sbin/nologin" );
		
mysql> select  *  from user  where  id  between 5 and 10;

mysql> select  distinct   shell  from  user 
       where shell="/sbin/nologin";

mysql> select  shell  from  user;
mysql> select  distinct   shell  from  user;

mysql> update user set password="f"  where id >= 2 and id <=5 ;
或
mysql> update user set password="f" where  id between 2 and 5;

	3.2 高级匹配条件
		1 模糊查询 like
		where  字段 like ‘’；
		_      表示1个字符
		%     表示0~n个字符
mysql> select name from user where name like '____';
mysql> select name from user where name like '%a%';
mysql> select name from user where name like '_%_';
mysql> select name from user where name like 'r%t';
mysql> select name from user where name like 'a%';
mysql> select name ,uid from user where uid like '___';
		2 正则匹配 where 字段名  regexp   '正则表达式’
                           正则元字符   ^   $   .   [ ]   *    | 
mysql> select name ,uid   from user  where uid regexp '^..$';
mysql> select name ,uid   from user  
           where name regexp '^[abc]';
mysql> insert into  db3.user(name)
       values("ya2ya"),("yaya9"),("bab4y");
mysql> select name ,uid   from user  
       where name regexp '[0-9]';
		3 四则运算 + - * /  %
mysql> update user set uid=uid+1 where id <= 5;
mysql> select id , name , uid from user where id <= 5;
mysql> alter table user add age tinyint default 19 after name;
mysql> select name , age , 2019 - age csnf from user 
       where name="root";
mysql> select name , uid , gid , uid+gid zcj , (uid+gid)/2 pjf from user where  name="mysql";
mysql> select  name , uid from user where uid % 2 = 0;
mysql> select  name , uid from user where uid % 2 != 0;
	3.3 操作查询结果 
		1 排序 order by  字段名  排序方式asc /desc
mysql> select  name,uid from user where  uid between 10 and 100       order by uid  desc;

mysql> select  name,uid from user where  uid between 10 and 100       order by uid  ;

		2 分组  group by  字段名
mysql> select  gid  from  user where id <= 20  group by gid;
mysql> select  shell  from  user where id <= 20  group by shell;
		3 限制显示行 个数
mysql> select id,name,shell from user where id <=10 limit 1;
mysql> select id,name,shell from user where id <=10 limit 3;

mysql> select id ,  name  , shell  from user 
        where id <=10   limit 3,5;

mysql> select id ,  name  , shell  from user 
        where id <=10   limit 1,5;

		4 查询结果过滤 having 条件
		 mysql> select name from  user where shell != "/bin/bash"  having name="mysql";

		5 聚集函数 :对数据做统计的内置命令
mysql> select sum(uid)  from user;
mysql> select avg(uid)  from user;	
mysql> select max(uid) from user ;
mysql> select min(uid) from user ;
mysql> select count(name) from user where uid <=10 ;
mysql> select  count(*) from user;

四、MySQL管理工具（phpmyadmin）


匹配条件： 必备技术  insert select update delete
           单表查询 ( 嵌套查询  多表查询 连接查询 )

++++++RDBMS1_DAY04

一、用户授权：
	1 什么是用户授权：在数据库服务器上添加新的连接用户并设置权限和密码
	2 用户授权命令格式：
	mysql> grant 权限列表 on 库名 to  用户名@"客户端地址"
               identified by "密码" [with grant option] ;

	例子：	
	mysql> grant all on  db4.*  to  yaya@"%" 

		          identified   by "123qqq...A” ;

	权限列表的表示方式？


	3 使用授权用户连接数据库服务器的命令格式
	]# mysql  -h数据库服务器的ip  -u授权用户名 -p密码

	4 相关命令
	select user() ;
	show grants;
	show grants for 用户名@"客户端地址";
	set password=password("密码");
	set password for  用户名@"客户端地址"=password("密码");
	drop user 用户名@"客户端地址";
	
	5 授权信息存储在mysql库下的表里
	user表    记录已有的授权用户及权限
	db表       记录已有授权用户对数据库的访问权限
        tables_priv表       记录已有授权用户对表的访问权限
        columns_priv表   记录已有授权用户对字段的访问权限
!!!查看表记录可以获取用户权限；也可以通过更新记录，修改用户权限

       6 撤销权限 : 删除添加用户的权限
命令格式：
mysql> revoke  权限列表 on 库名 from 用户@“客户端地址”；

	mysql> select  * from  mysql.user where user="mydba";  
	mysql> revoke grant option on *.*  from  mydba@"%";
	mysql> revoke all  on *.*  from  mydba@"%";
	mysql> select  * from  mysql.user where user="mydba";
	mysql> drop user mydba@"%";

二、完全备份
    2.1 物理备份与恢复
	备份50 
	  cp  -r  /var/lib/mysql   /root/mysql.bak
	  scp -r /root/mysql.bak  root@192.168.4.51:/tmp/

	恢复51
	  systemctl  stop mysqld
	  rm -rf /var/lib/mysql/*
	  cp -r /tmp/mysql.bak/*  /var/lib/mysql/
	  chown  -R mysql:mysql  /var/lib/mysql
	  systemctl  start mysqld
	  mysql -uroot -p密码
	  mysql> show databases;

    2.2 逻辑备份与恢复： 使用命令(可以使用mysql服务自带命令或安装其他软件提供的命令）对数据做备份 ,根据备份时的数据 生成与数据对应的命令 保存在定义的文件里。要恢复数据时，执行保存在定义的文件里的命令，就可以把数据恢复了

	备份策略：完全备份 增量备份 差异备份

完全备份命令mysqldump  -uroot -p密码 库名 > 目录/xxx.sql

50 ]# mysqldump -uroot -pA...qqq321  -A  > /mybak/allbak.sql
50 ]# scp  /mybak/allbak.sql  root@192.168.4.51:/tmp/

51]# mysql> drop  database db1; drop database db2;
     mysql> drop  database db3 ; drop database mysql;

51]# mysql -uroot -p密码  < /tmp/allbak.sql
     mysql> show databases;

]# mysqldump  -uroot  -p密码  库名 >  目录/xxx.sql
备份所有数据 ：
	1台服务器           -A 、--all-databases
	1个库               mysql
	1张表		    db3 user
	多个库              -B  库名1  库名2 

]# mysql   -uroot  -p密码  库名 < 目录/xxx.sql

mysqldump的缺点？
	1 备份和恢复数据时，会给表加写锁
	2 新产生的数据无法恢复

00  18  *   *   1  /root/allbak.sh(备份服务器所有数据）

三、增量备份  
	3.1 binlog日志的使用
		1 binlog日志介绍
		2 启用binlog日志
		3 查看已有的日志文件和当前真在使用的日志文件
		4 手动创建新的日志文件
		5 删除已有的日志文件
mysql> purge  master  logs  to  "localhost-bin.000005";
mysql> reset  master ;

		6 自定义日志文件存储目录和名字
]# mkdir /mylog
]# chown  mysql  /mylog

]# vim /etc/my.cnf
   [mysqld]
   log_bin=/mylog/db50
   server_id=50
:wq

]# systemctl  restart mysqld

]# ls /mylog/db50*

		7 修改日志文件记录命令的格式
]# vim /etc/my.cnf
   [mysqld]
	binlog_format="mixed"
:wq
]# systemctl  restart  mysqld
]# mysql -uroot  -p密码
mysql> show variables like "binlog_format";
mysql> show master status ;
mysql> insert into  db3.user(name,uid) values("jima",99);
mysql> insert into  db3.user(name,uid) values("jimb",99);
mysql> insert into  db3.user(name,uid) values("jimc",99);
mysql> show master status ;

		8 查看日志记录的内容
]# mysqlbinlog /mylog/db50.000002  | grep  -i  insert

		休息到 11：20 

	3.2 使用binlog日志恢复数据
            ]# mysqlbinlog  binlog日志  | mysql  -uroot   -p密码
		
            ]# mysqlbinlog 选项  binlog日志  | mysql  -uroot   -p密码


	    选项
		指定偏移量范围
		--start-position=值  --stop-position=值

		指定时间范围
		--start-datetime="yyyy-mm-dd hh:mm:ss"   --stop-datetime="yyyy-mm-dd hh:mm:ss"

50]#  mysql> reset master;
      mysql> show master stauts;
   ]# mysqldump  -uroot -p密码  db3 user  > /root/db3_user.sql
     mysql> insert into  db3.user(name,uid) values("boba", 33);
     mysql> insert into  db3.user(name,uid) values("bobai", 33);
     mysql> insert into  db3.user(name,uid) values("bobaf", 33);
     mysql> insert into  db3.user(name,uid) values("bobaf", 33);
     mysql> show master status;

51]#  mysql> use  db3;  delete from db3.user;

50]# scp  /root/db3_user.sql root@192.168.4.51:/opt/
50]# scp /mylog/db50.000001  root@192.168.4.51:/opt/

51]# mysql  -uroot -p密码  db3  < /opt/db3_user.sql
51]# mysqlbinlog  /opt/db50.000001 | mysql  -uroot -p密码
51]# mysql> select  count(*) from db3.user;



50~]# mysql> insert into db3.user(name,uid,gid)values("A",33,33);
50~]# mysql> insert into db3.user(name,uid,gid)values("B",33,33);
50~]# mysql> insert into db3.user(name,uid,gid)values("C",33,33);
50~]# mysql> insert into db3.user(name,uid,gid)values("D",33,33);
50~]# mysql> delete from db3.user where name = "A";
50~]# mysql> delete from db3.user where name in ( "B","C");

50~]#scp  /mylog/db50.000001  root@192.168.4.51:/tmp/

51 ~]# mysqlbinlog /tmp/db50.000001

51 ~]# mysqlbinlog   --start-position=1604    --stop-position=2733 /tmp/db50.000001  | mysql -uroot -pA...qqq321


51 ~]# mysql -uroot -pA...qqq321 -e 'select name from db3.user'


+++++50主机 使用本机的binlog日志文件恢复 删除的记录A B C 

50~]# mysqlbinlog /mylog/db50.000001

50~]# mysqlbinlog  --start-position=1604   --stop-position=2408 /mylog/db50.000001 | mysql -uroot -pA...qqq321

50~ ]# mysql -uroot -pA...qqq321 -e 'select name from db3.user'
+++++RDBMS1_DAY05 --使用percona软件提供的命令对数据做
	1 percona软件介绍
	2 安装软件
	3 innobackupex命令常用选项
	4 准备实验环境
	    1 删除自定义的所有库只留下默认的4个可库
	create database db5;
	create table db5.a(id int)engine=innodb;
	create table db5.b(name char(10) )engine=innodb;
	分别向a 和b 表里插入多条记录

完全备份与恢复
   50 完全备份
]# innobackupex --user 用户  --password 密码  目录名 --no-timestamp


      ]# innobackupex  --user root  --password A...qqq321  /allbak  --no-timestamp
      ]# scp  -r /allbak  root@192.168.4.51:/root/
   51 完全恢复
	准备恢复数据
	]# innobackupex  --apply-log  目录名
	拷贝数据到数据库目录下
	]# innobackupex  --copy-back  目录名
	修改数据库目录的所有者和组用户为mysql
	]# chown -R mysql:mysql /var/lib/mysql


	]# cat /root/allbak/xtrabackup_checkpoints
	]# systemctl stop  mysqld
	]# rm  -rf /var/lib/mysql/*
	]# innobackupex --apply-log  /root/allbak
	]# innobackupex --copy-back  /root/allbak
	]# chown -R mysql:mysql /var/lib/mysql
	]# systemctl start  mysqld
	]# mysql -uroot -p密码 
	mysql> use db5;
	mysql> select  * from a ;  select  * from b;

使用完全备份文件恢复1张表的所有数据 192.168.4.51
192.168.4.51 > delete from db5.b;
	     > select  * from db5.b;

	表空间:用来存放表记录的文件 表名.ibd

	1 删除表空间
 alter  table  库名.表名  discard  tablespace; 
 mysql> alter  table  db5.b  discard  tablespace;

	2 导出表信息
 ]# innobackupex --apply-log --export /root/allbak

	3 拷贝表信息文件到数据库目录下
]# cp /root/allbak/db5/b.{cfg,exp,ibd} /var/lib/mysql/db5/

	4 修改表信息文件的所有者及组用户为mysql
]# chown mysql:mysql  /var/lib/mysql/db5/b.*

	5 导入表空间
mysql> alter  table  db5.b  import  tablespace;

	6 删除数据库目录下的表信息文件
]# rm  -rf /var/lib/mysql/db5/b.cfg
]# rm  -rf /var/lib/mysql/db5/b.exp

	7 查看表记录
mysql> select  * from  db5.b;

增量备份与恢复 
      备份 192.168.4.50
周一 完全备份 /allbak

向db5库表中插入新记录后做增量备份

周二 增量备份 /newdir1
]# innobackupex --user root  --password 123456 --incremental /newdir1 --incremental-basedir=/allbak --no-timestamp

]# ls /newdir1


向db5库表中插入新记录后做增量备份
周三 

nnobackupex --user root  --password 123456 --incremental /newdir2  --incremental-basedir=/newdir1  --no-timestamp

]# scp  -r /allbak  root@192.168.4.52:/opt/
]# scp  -r /newdir1  root@192.168.4.52:/opt/
]# scp  -r /newdir2  root@192.168.4.52:/opt/
 
      增量恢复 192.168.4.52
]# innobackupex --apply-log  --redo-only /opt/allbak/
]# innobackupex --apply-log  --redo-only /opt/allbak --incremental-dir=/opt/newdir1

]# innobackupex --apply-log  --redo-only /opt/allbak --incremental-dir=/opt/newdir2 

]# innobackupex  --copy-back /opt/allbak/
]# chown  -R mysql:mysql /var/lib/mysql
]# systemctl  start mysqld
]# mysql -uroot -p123456
mysql> show databases;
  休息 + 练习 到  11：30 

差异备份与恢复
周一 完全备份
]# innobackupex --user root  --password  /allbak  --no-timestamp
插入新记录


周二 差异备份
]# innobackupex --user root  --password  --incremental  /dir1   --incremental-basedir=/allbak
插入新记录

周三 差异备份

]# innobackupex --user root  --password  --incremental  /dir2  --incremental
-basedir=/allbak
插入新记录

周四 差异备份
]# innobackupex --user root  --password  --incremental  /dir3 --incremental
-basedir=/allbak

++++RDBMS1 （数据库基础） 总结
一 搭建mysql数据库服务器 
二 数据管理（insert  delete update  select）
三 用户授权与撤销权限和删除用户
四 数据备份与恢复
	备份策略 完全备份 增量备份  差异备份
        命令     mysqldump  cp tar  innobackupex  binlog日志
50-  55
++++++2019/11/13_RDBMS2
day01
一 、主从同步
	配置主服务器步骤
		1 启用binlog日志文件
		2 用户授权
		3 查看binlog日志信息

	配置从服务器
		1  指定server_id
		2  确保数据一致
		3  指定主服务器信息
		4  启动slave 程序
		5  查看状态

       测试配置：写在主服务器的数据，从服务器也会有
		1 主服务器数据库管理员本机登陆写数据
		2 主服务器添加授权用户，客户端连接登陆写数据


二、主从同步模式
	2.1 结构模式
		一主一从
		一主多从 （把主机53 也配置为51的从服务器）
	
		主从从  53 主---> 54 从  ---->55从

			53主： 启用binlog日志 、 用户授权 、 查看日志信息

			54主/从 启用binlog日志 、 用户授权 、 查看日志信息
				指定主服务器信息  启动slave程序 查看状态

			55从 指定server_id  指定主服务器信息  
                             启动slave程序 查看状态

		互为主从(主主结构) 把数据库服务器56和57配置为主主结构

		 1 克隆2台新虚拟机 配置ip地址 为 192.168.4.56 和 57
		 2 分别在2台主机上安装mysql服务软件，并启动mysql服务
		 3 使用初始密码的登陆 并设置登陆密码123qqq...A
	         4 配置主主结构
	    配置主机56: 启用binlog日志 、 用户授权 、 查看日志信息	
	    配置主机57: 启用binlog日志 、 用户授权 、 查看日志信息

	    配置主机56 指定主服务器为57
	    配置主机57 指定主服务器为56

	    测试配置：客户端50 分别连接56 和 57 存取数据。

	2.2 复制模式 (主从服务器之间同步数据的方式)
		异步模式（默认）
		全同步模式
		半同步模式

		修改数据同步模式为 半同步模式
		修改主服务器  53
		命令行配置
		    安装模块 install  plugin 
		   mysql> install  plugin  rpl_semi_sync_master SONAME "semisync_master.so";

	         mysql> select  plugin_name, plugin_status from  information_schema.plugins  where plugin_name like '%semi%';
			
		   启用模块 set  global 
			mysql> set  global rpl_semi_sync_master_enabled=1;
			mysql> show  variables  like  "rpl_semi_sync_%_enabled";

		永久配置
		vim /etc/my.cnf
		[mysqld]
plugin-load=rpl_semi_sync_master=semisync_master.so
rpl_semi_sync_master_enabled=1
:wq
	

		  54（主/从）
mysql>install  plugin  rpl_semi_sync_master SONAME "semisync_master.so";
mysql>install  plugin  rpl_semi_sync_slave SONAME "semisync_slave.so";


mysql> set  global rpl_semi_sync_slave_enabled=1;
mysql> set  global rpl_semi_sync_master_enabled=1;



]# vim /etc/my.cnf
[mysqld]
plugin-load = "rpl_semi_sync_master=semisync_master.so;rpl_semi_sync_slave=semisync_slave.so"
rpl_semi_sync_master_enabled=1
rpl_semi_sync_slave_enabled=1
:wq		


		
		  修改从服务器  55
		  mysql>  install  plugin  rpl_semi_sync_slave
                          SONAME  "semisync_slave.so";
		  
		 ]# vim /etc/my.cnf
		 [mysqld]
		  [mysqld]
plugin-load=rpl_semi_sync_slave=semisync_slave.so
rpl_semi_sync_slave_enabled=1
:wq

+++++RDBMS_DAY01
一、数据读写分离
	1.1 什么是 数据读写分离
	  把客户端访问时的查询请求sql命令 和写请求sql命令 分别给不同的数据库服务器处理。

	1.2 为什么配置数据读写分离
	1.4 配置数据读写分离
		1.4.1 装包
			
		1.4.2 修改配置文件
			[maxscale]服务运行后线程数量
			[server数字] 指定数据库服务器
			[MySQL Monitor] 指定被监视的数据库服务器
			[Read-Write Service]定义读写分离使用的主机
			[MaxAdmin Service] 定义管理服务
			[Read-Write Listener]定义读写分离服务使用的端口
			[MaxAdmin Listener] 定义管理服务使用的端口
			
		
		        在数据库服务器上添加对应的授权用户
		
			 监控用户 maxscalemon
grant replication slave, replication client on *.* to maxscalemon@"%" identified by "123qqq...A";


			 路由用户 maxscalerouter
grant select  on  mysql.*  to  maxscalerouter@"%" identified by "123qqq...A";

			 查看授权用户
			 select user ,host  from mysql.user;

		1.4.3 启动服务 192.168.4.57
			]# maxscale  -f  /etc/maxscale.cnf
			]# netstat  -utnlp  | grep  maxscale
			]# ls /var/log/maxscale/maxscale.log

		      停止服务的命令 killall  -9  maxscale
	1.5 测试配置
		1.5.1 在57 本机访问管理服务查看监控状态
		[root@host57 ~]# maxadmin  -uadmin  -pmariadb -P4016
		MaxScale> list servers

		1.5.2 客户端连接57 主机访问数据
			1. 在主数据库服务器51 添加访问数据的连接用户
			mysql> grant select , insert on db6.*  to  jim@"%" identified by "123qqq...A"；
		
			2.   50连接57 主机访问数据
]# mysql -h192.168.4.57 -P4006  -ujim  -p123qqq...A
> select  * from  db6.t1;
> insert into db6.t1 values(1111);

			3 验证读写分离功能
			   1、 在主服务器51 使用root 用户把表记录清空
				delete from db6.t1;

			   2 、在从服务器52  使用root 用户插入1条记录
				insert into db6.t1 values(5252);

			   3 、在客户端50 连接 57 可以查看到数据
			]# mysql -h192.168.4.57 -P4006 -ujim -p123qqq...A 
                        > select  * from db6.t1; 可以查到记录
			> insert into  db6.t1 values(888); 写1条新记录

			   4 在主服务器51 使用root 用户查看记录
		            > select  * from db6.t1; 查看到新记录888
				

			   5 在客户端50 连接 57 可以查看到数据
			]# mysql -h192.168.4.57 -P4006 -ujim -p123qqq...A
                        > select  * from db6.t1; 可以查到2条记录

二、MySQL多实例
   克隆1台新虚拟机 配置ip 地址  192.168.4.58 在主机58上部署mysql多实例
	1 安装软件
	2 环境配置
	3 编写主配置
	4 启动服务
		1  创建存储数据的目录
		2  启动服务
		   ]# mysqld_multi start  1
		   ]# ls  /dir1   查看数据库目录文件列表

		3  使用root管理员初始密码登陆
		   ]# mysql -uroot  -p'sB?ihq(DO7.f' -S /dir1/mysqld1.sock
		
                4  强制修改登陆密码
		   > alter user  root@"localhost" identified by "123456";
		   > show databases;
		   > exit
		5 使用修改后的密码登陆
		   ]# mysql -uroot  -p123456 -S /dir1/mysqld1.sock
		  mysql>exit;

		6 查端口
		  ]# netstat -utnlp  | grep  mysqld

		7 停止服务

		]# mysqld_multi  --user=root --password=123456  stop 1

		启动实例2 
		48  mysqld_multi  start 2 
   		49  ls /dir2
   		50  mysql -uroot -p'tUhuAN8z=ph(' -S /dir2/mysqld2.sock
   		51  mysql -uroot -p123456 -S /dir2/mysqld2.sock
		     > alter user root@"localhost" identified by "123456";
   		52  netstat  -utnlp  | grep  mysqld
   		53  mysqld_multi  --user=root --password=123456 stop 2
   		54  netstat  -utnlp  | grep  mysqld

		启动2个实例服务 
[root@host58 ~]# mysqld_multi  start 1
[root@host58 ~]# 
[root@host58 ~]# mysqld_multi  start 2
[root@host58 ~]# 
[root@host58 ~]# netstat -utnlp  | grep mysqld
tcp6       0      0 :::3307                 :::*                    LISTEN      23840/mysqld        
tcp6       0      0 :::3308                 :::*                    LISTEN      24000/mysqld        
[root@host58 ~]#

	排错时间到 17：10 	
	
	扩展，做如下配置：
	1 在58主机运行实例 mysqld3 服务

	]# vim /etc/my.cnf
	[mysqld3]
	datadir=/dir3
	port=3309
	pid-file=/dir3/mysqld3.pid
	log-error=/dir3/mysqld3.err
	socket = /dir3/mysqld3.sock
	:wq
       mkdir /dir3
   64  mysqld_multi  start 3
   65  ls /dir3
   66  mysql -uroot -p'6&;uE?+H:3_a' -S /dir3/mysqld3.sock
        > alter user root@"localhost" identified  by "123456";
	> exit
   67  mysql -uroot -p123456 -S /dir3/mysqld3.sock

	休息到 17：30

	2 配置58 主机 允许客户50 访问 实例2服务 并启用实例2服务的binlog日志
host58 ~]# mysql -uroot  -p123456 -S /dir2/mysqld2.sock
      mysql> grant all on gamedb.*  to admin@"%" identified by "123456";
      mysql> select host , user from mysql.user;
      mysql> exit

host58 ~]# vim /etc/my.cnf
              [mysqld2]
               server_id=2
               log_bin=plj
           :wq
[root@host58 ~]# mysqld_multi  --user=root  --password=123456 stop  2
[root@host58 ~]# mysqld_multi start 2
[root@host58 ~]# mysql -uroot  -p123456 -S /dir2/mysqld2.sock
                 mysql> show master status;

host50 ~]# mysql  -h192.168.4.58 -P3308  -uadmin -p123456
> show grants;
mysql> create database gamedb;
Query OK, 1 row affected (0.03 sec)

mysql> create table gamedb.user(name char(10));
Query OK, 0 rows affected (0.50 sec)

mysql> insert into gamedb.user values("jim");
Query OK, 1 row affected (0.06 sec)

mysql> select  * from  gamedb.user;

+++++RDBMS2_DAY03----- 数据分片
一、相关概念
二、配置数据分片服务 192.168.4.56
	2.1 安装软件
	2.2 配置mycat服务
		2.2.1 定义客户端连接用户名、密码、逻辑库名
			server.xml                TESTDB	
		2.2.2 定义数据分片存储的表
]# cp  schema.xml  /opt/ 
]# sed -i  '56,77d' schema.xml
]# sed -i  '39,42d' schema.xml
]# vim schema.xml
<mycat:schema .....>
	 <schema .....>  定义分片表
		<table ...... />
		<table ...>....</table>	
         </schema>

	 <dataNode ........../>  数据库服务器主机名


	 <datahost .....>  指定数据库服务器ip地址
	 </datahost>

</mycat:schema>
		2.2.3 配置3台数据库服务器
			1 创建存储数据的库
			2 添加授权用户 pljadmin  123qqq...A

grant  all  on  *.*  to   pljadmin@"%" identified by "123qqq...A";

	 	    
	        2.2.4 启动mycat 服务
			]# /usr/local/mycat/bin/mycat  start
			]# netstat -utnlp  | grep :8066
			]# ls /usr/local/mycat/logs/

三、客户端连接分片服务器访问数据
	3.1 存储数据的操作步骤 
 
	3.2 连接分片服务器
host50 ~]# mysql  -h192.168.4.56 -P8066 -uroot -p123456


	3.3  存储数据（分片规则的使用）
枚举法 （sharding-by-intfile）： 字段值必须在规则文件定义的值里选择


sharding_id

]# vim partition-hash-int.txt
	10000=0
	10010=1
	10020=2
:wq
]# /usr/local/mycat/bin/mycat stop
]# /usr/local/mycat/bin/mycat start

]# mysql  -h192.168.4.56 -P8066  -uroot -p123456
mysql> use  TESTDB;
mysql> show tables;
mysql> create table  employee(ID  int  primary key  auto_increment ,   
       sharding_id int  , name  char(15) , homeaddr  char(30) );

mysql> desc employee;
mysql> insert into employee(sharding_id,name,homeaddr)
values
(10000,"bob","usa"),(10000,"tom","usa"),(10010,"lucy","usa");

mysql> select  * from  employee;
		

		求模法（mod-long）: 根据字段值与设定的数字求模结果存储数据

		 <table name="hotnews"  dataNode="dn1,dn2,dn3"
                           rule="mod-long" />
  
		]# /usr/local/mycat/bin/mycat  stop
		]# /usr/local/mycat/bin/mycat  start


host50 ~]# mysql  -h192.168.4.56 -P8066 -uroot -p123456
use TESTDB
mysql> create table hotnews(id  int  , title char(15) ,connect char(50) );
mysql> desc hotnews;

mysql> insert into hotnews(id,title,connect)
values
(3,"ope","dmy"),(6,"shell","wk"),(9,"system","nb"),
(11,"dba","plj"),(7,"python","zzg"),(10,"cloud","lx");

		全局存储 type=global
 <table name="goods" primaryKey="ID" type="global" dataNode="dn1,dn2,dn3" />

]# mysql  -h192.168.4.56 -P8066 -uroot -p123456
mysql> use TESTDB;
mysql> create table goods(ID int primary key , name char(10),class char(7));
mysql> desc goods;
mysql>
mysql> insert into goods(ID,name,class)
    -> values
    -> (1,"bob","nsd1908"),
    -> (2,"tom","nsd1909"),
    -> (3,"lucy","nsd1919");
	
三、在分片服务器添加新库、新表
	3.1 添加新库 BBSDB
	
    <property name="schemas">TESTDB,BBSDB</property>

	3.2 添加新表 user 和 hotnews2
    <schema name="BBSDB" checkSQLschema="false" sqlMaxLimit="100">
        <table  name="hotnews2" dataNode="dn1,dn2,dn3" rule="mod-long" />
        <table  name="user" dataNode="dn1,dn2,dn3" rule="mod-long" />
    </schema>


	3.3 重启动mycat服务
		]# /usr/local/mycat/bin/mycat  stop
		]# /usr/local/mycat/bin/mycat  start
		]# netstat -utnlp  | grep  :8066

	3.4 客户端测试
		50~]# mysql -h192.168.4.56 -P8066 -uroot -p123456
		mysql> show databases;
		mysql> use BBSDB;
		mysql> show tables;

		建表
mysql> create table user(id int , name char(10), password char(6) );
		插入记录
mysql> insert into user (id , name , password)
    -> values
    -> (11,"a","xxxx"),(12,"b","yyyy"),(13,"c","zzzz");
mysql> select  * from user;

		验证 
[root@host53 ~]# mysql -uroot -p123qqq...A -e 'select  * from db1.user'

+++++RDBMS2_DAY04   MYSQL集群
历史知识回顾：
	什么是集群：多台服务器提供相同的服务
	集群的分类：         LB                   HA 
	集群服务软件： LVS Nginx Haproxy      Keepalived

配置mysql高可用集群  51  52  53
MHA软件软件介绍？
配置集群：
    1 环境准备
	1.1 在所有主机安装共享目录的下的perl软件包
	1.2 配置ssh密钥对认证登陆
		1 管理主机57 无密码连接所有数据库服务器
		2 数据库服务器彼此之间可以互相无密码连接
		3 配置一主多从同步结构
			配置主服务器51
			配置从服务器52
			配置从服务器53

    2 配置管理节点 192.168.4.57
	1 安装软件包
		]# yum -y install  mha4mysql-node-0.56-0.el6.noarch.rpm
		]# yum -y  install perl-ExtUtils-*   perl-CPAN*
		]# tar -zxf  mha4mysql-manager-0.56.tar.gz 
		]# cd   mha4mysql-manager-0.56
		]# perl  Makefile.pl
		]# make
		]# make  install

	2 编写主配置文件
		]# mkdir /etc/mha
		]# cd mha4mysql-manager-0.56
		]# cp samples/conf/app1.cnf /etc/mha/
		]# vim /etc/mha/app1.cnf
			[server default]
			[serverX]

	3 创建故障切换脚本
	  ]# cd mha-soft-student
          ]# cp master_ip_failover  /etc/mha/
	  ]# vim  +35 /etc/mha/master_ip_failover
	     my $vip = '192.168.4.100/24';
	  :wq
	  ]# chmod +x /etc/mha/master_ip_failover

	4 部署VIP地址: 把vip地址配置在主服务器51上

	  db51 ~]# ifconfig  eth0:1  192.168.4.100/24
	  db51 ~]# ifconfig  eth0:1


  3 配置数据节点 192.168.4.51/52/53
	1  安装软件包 mha_node

	2  用户授权
		2.1 监控用户root
		   grant all on  *.*  to  root@"%" identified by "123qqq...A";

		2.2 数据同步用repluser
			(52/53)
			grant all on  *.*  to  root@"%" identified by "123qqq...A";

        3 根据角色做相应配置
		3.1 启用半同步复制模式
		3.2 禁止自动删除本机的中继日志文件
		3.3 在2台从服务器上启用binlog日志
		3.4 重启动所有数据库服务器的mysqld服务
		3.5 在52 /53  查看从的状态show slave status\G;

  4 测试配置
	4.1 测试集群环境
	    测试ssh
	      ]# masterha_check_ssh --conf=/etc/mha/app1.cnf
		
            测试主从同步
	      ]# masterha_check_repl --conf=/etc/mha/app1.cnf
	
	    启动管理服务
		[root@host57 ~]# masterha_manager --conf=/etc/mha/app1.cnf --remove_dead_master_conf  --ignore_last_failover


		[root@host57 ~]# masterha_check_status  --conf=/etc/mha/app1.cnf
app1 (pid:26108) is running(0:PING_OK), master:192.168.4.51
[root@host57 ~]# 


[root@host57 mha]# ls
app1.cnf  app1.master_status.health  manager.log  master_ip_failover
[root@host57 mha]#
	
	   访问集群：
		1 在主服务器51 添加授权用户，给客户端连接使用

		2 客户端连接vip地址，访问数据库服务器
		[root@host50 ~]# mysql -h192.168.4.100 -uyaya5 -p123qqq...A
mysql> insert into db9.a values(111);
mysql> insert into db9.a values(112);
mysql> insert into db9.a values(212);
mysql> select  * from a;
	
		
[root@host52 ~]# mysql -uroot -p123qqq...A -e 'select * from db9.a'
[root@host53 ~]# mysql -uroot -p123qqq...A -e 'select * from db9.a'

	  测试高可用:当主服务器51宕机后，客户端依然可以连接vip地址访问数据
		1 在51主机： 停止mysql服务 关机
		  51]# systemctl stop mysqld

		2 在2台从服务器查看vip地址 及从的状态信息
		  ]# ifconfig  eth0:1
                  ]# mysql -uroot -p密码 -e 'show slave status\G'

		 
		3 客户端访问vip地址存取数据
		 mysql -h192.168.4.100 -uyaya5 -p123qqq...A
		  > select  * from  db9.a;

		4 在管理主机上启动管理服务并查看服务状态
[root@host57 ~]# masterha_check_repl --conf=/etc/mha/app1.cnf
[root@host57 ~]# masterha_manager --conf=/etc/mha/app1.cnf --remove_dead_master_conf  --ignore_last_failover

[root@host57 ~]# masterha_check_status  --conf=/etc/mha/app1.cnf
app1 (pid:27477) is running(0:PING_OK), master:192.168.4.52
[root@host57 ~]# 
		   
	        
               5 修复故障服务器51:把51主机再添加回去集群
		  5.1 数据库服务器的配置
			启动mysql服务
			与主服务器数据一致
			指定主服务器信息
			启动slave进程
			查看状态信息

		  5.2 配置管理主机
			修改主配置文件app1.cnf
			测试集群环境
			重启管理服务
			查看服务状态
回顾MHA 集群配置 ：
0 准备集群环境
1 定义vip地址 192.168.4.100
2 集群中的数据库服务器必须是主从结构 （1 主 2 从）
3 启动管理服务（ ssh 免密登陆   数据服务器必须是主从结构）
4 定义故障切换脚本
5 要人为的把宕机数据库服务器添加到集群（在添加到集群里之前必须配置为当前主服务器的从主机）

++++++++++++++++++RDBMS2_DAY05
一、配置mysql集群PXC       (配置多)
	准备3台新虚拟机
	eth0 192.168.4.71
	eth0 192.168.4.72
	eth0 192.168.4.73
        拷贝软件pxc   到 3台 主机里
1.1 PXC软件介绍
1.2 安装软件
	cd PXC/
	yum -y  install libev-4.15-1.el6.rf.x86_64.rpm
	yum -y  install percona-xtrabackup-24-2.4.13-1.el7.x86_64.rpm  
	yum -y  install qpress-1.1-14.11.x86_64.rpm
	rm  -rf  *.rpm (可选)
	tar -xvf Percona-XtraDB-Cluster-5.7.25-31.35-r463-el7-x86_64-bundle.tar 
	yum -y  install Percona-XtraDB-Cluster-*.rpm
1.3 修改配置文件

1.4 启动服务
    71~]# systemctl  start mysql@bootstrap.service

1.5 测试配置
	1.5.1 Mysql> show status like "%wsrep%";
	1.5.2 客户端访问集群存取数据
	1.5.3 测试高可用功能
	1.5.4 测试宕机的服务器自动 恢复

二、MySQL存储引擎 （ 理论多配置少 ）
2.1 服务的功能模块（组成结构）
     1 管理工具  2 连接池 3 SQL接口  4  分析器  5 优化器 
     6 查询缓存 （存储查找到的数据）查询缓存空间 在系统物理内存划分
                 client  -----> 查询缓存             
                         <------
     7 存储引擎: 
     8 文件系统 /var/lib/mysql/库名/表.ibd

     事务【 建立连接  连接成功   操作数据  断开连接 】
查看数据库服务支持存储引擎 show  engines;
查看表使用的存储引擎 show  create table 表名；

建表 指定 表使用的存储引擎 
mysql> create table db10.c1( name char)engine=memory;
mysql> create table 库名.表名( 字段名列表 )engine=存储引擎名;

修改表使用的存储引擎
mysql> alter table db10.c1  engine=myisam;
mysql> alter table 库名.表名  engine=存储引擎名;

修改数据库服务器默认使用存储引擎名
]# vim /etc/my.cnf
[mysqld]
default-storage-engine=myisam	
:wq

]# systemctl  restart mysqld

myisam存储引擎特点：
	支持表级锁 (表锁)
        不支持事务、事务回滚、外键 foreign key

	表文件
	表名.frm    //表结构
	表名.MYI   //索引
	表名.MYD  //数据

innodb存储引擎特点
       支持行级锁定（行锁）
       支持事务、事务回滚、外键

	事务日志文件
        ibdata1
        ib_logfile0
        ib_logfile1



	
锁粒度（给表加锁时 锁的范围）
  
   行锁（innodb)tech 只对被访问的行分别加锁
		     select * from tech where id <= 5;

   表锁 (myisam)user 对1张表加锁
		     select * from user  where id <= 5;

   * 给表加锁后，在没有释放锁之前是不允许对表做访问的

锁类型  
   读锁 又称共享锁 （select）
		pc1   select * from user  where id <= 5;
                      mysqld服务 加读锁

		pc2 select
		pc3 insert/update/delete

   写锁又称排它锁或互斥锁  (insert / update / delete )
               pc1  insert into user values("bob");
			mysqld服务 加写锁
	       pc2  select  user
	       pc3  delete /updat insert
			
               update user set name=tom  where id=1;
               update user set name=lucy  where id=1;

   mysql> show  status like  "table_lock%";

	
   事务特性:ACID
+++++++RDBMS2 数据库进阶（5天）
1、mysql主从同步：
	主从同步工作过程
	主从同步结构模式
	主从同步结构复制模式

2、mysql数据对写分离
       软件maxscale + mysql一主一从
       select 
       insert update  delete

   mysql多实例    

3 数据分片（分库 / 分表）
     软件MyCAT  
         分片规则 （10种） shareding-by-intfile  mod-long
         配置文件 schema.xml  rules.xml    server.xml
         添加新库/表
	 适合数据大量写入的环境

4 MHA集群
0 准备集群环境
1 定义vip地址 192.168.4.100
2 集群中的数据库服务器必须是主从结构 （1 主 2 从）
3 启动管理服务（ ssh 免密登陆   数据服务器必须是主从结构）
4 定义故障切换脚本
5 要人为的把宕机数据库服务器添加到集群（在添加到集群里之前必须>配置为当前主服务器的从主机）

5 PXC 、 mysql存储引擎 

RDBMS2_实验课
    DBA1-day03-test.txt  grant-test.txt

第3门课--Redis软件数据库服务的使用
+++++NoSQL_DAY01
一、部署Redis服务
	1.1  相关概念
	1.2  搭建redis服务器
		1 安装编译工具gcc
		2 解压源码
		3 编译
		4 安装
		5 初始化配置
		6 连接服务
		7 存取数据 keys  set   get
		8 断开连接
		9 使用/etc/init.d/redis_6379 脚本管理服务
	1.3 常用管理命令
		set   mset   get   mget      keys   type  
exists  ttl   expire  move 、select 
del   flushdb   flushall   save   shutdown

	1.4 配置文件解析
		练习：
		端口号 6350
		IP地址 192.168.4.50
		连接密码 123456
		测试配置


二、部署LNMP+Redis
	2.1 在主机57 上部署网站运行平台 lnmp
		1 安装源码nginx
		2 安装php-fpm软件
		3 安装mysql
		4 安装PHP
		5 启动服务
		6 编写网页文件
		7 客户端访问
		          http://192.168.4.57/test.php

	2.2 配置PHP支持redis服务
	2.3 测试配置

+++++NoSQL_DAY02--redis集群
(能够实现服务的高可用和数据的自动备份)
1 环境准备

2 创建集群及工作过程
	2.1  启用redis服务的集群功能
	2.2  配置管理主机 192.168.4.57
		1 安装redis软件
			]# rpm -q gcc  || yum  -y  install  gcc 
			]# tar -zxvf redis-4.0.8.tar.gz 
			]# cd redis-4.0.8/
			]# make && make install

	        2 创建管理脚本(ruby) 

			]#yum  -y  install   rubygems   ruby 
			]#gem  install  redis-3.2.1.gem
			]#mkdir  /root/bin  
			]#cp  src/redis-trib.rb   /root/bin
			]#chmod  +x   /root/bin/redis-trib.rb

		3 查看命令
			]#redis-trib.rb   help 
		4 创建集群
[root@host57 ~]# redis-trib.rb create --replicas 1   \
> 192.168.4.51:6351   192.168.4.52:6352   192.168.4.53:6353  \
> 192.168.4.54:6354   192.168.4.55:6355   192.168.4.56:6356
>>> Creating cluster
>>> Performing hash slots allocation on 6 nodes...
Using 3 masters:
192.168.4.51:6351
192.168.4.52:6352
192.168.4.53:6353
Adding replica 192.168.4.55:6355 to 192.168.4.51:6351
Adding replica 192.168.4.56:6356 to 192.168.4.52:6352
Adding replica 192.168.4.54:6354 to 192.168.4.53:6353
M: 57d4fadf4a3bbced11449af9bb04a262557f233b 192.168.4.51:6351
   slots:0-5460 (5461 slots) master
M: 6881739d2401f0b02db9907359d44f48ff83195f 192.168.4.52:6352
   slots:5461-10922 (5462 slots) master
M: 0a53e6fb0988998d650eb9a12ed35e4c0c0edcb9 192.168.4.53:6353
   slots:10923-16383 (5461 slots) master
S: 582ad29c13bf048eac9c0317046ef5489d5c8684 192.168.4.54:6354
   replicates 0a53e6fb0988998d650eb9a12ed35e4c0c0edcb9
S: 99cc7ddcb0416f4a668e826de3911a3c094190ac 192.168.4.55:6355
   replicates 57d4fadf4a3bbced11449af9bb04a262557f233b
S: 1d5eec748a1c391c34f1bd9cd278f4f0527c8cdb 192.168.4.56:6356
   replicates 6881739d2401f0b02db9907359d44f48ff83195f
Can I set the above configuration? (type 'yes' to accept): yes
>>> Nodes configuration updated
>>> Assign a different config epoch to each node
>>> Sending CLUSTER MEET messages to join the cluster
Waiting for the cluster to join.....
>>> Performing Cluster Check (using node 192.168.4.51:6351)
M: 57d4fadf4a3bbced11449af9bb04a262557f233b 192.168.4.51:6351
   slots:0-5460 (5461 slots) master
   1 additional replica(s)
S: 582ad29c13bf048eac9c0317046ef5489d5c8684 192.168.4.54:6354
   slots: (0 slots) slave
   replicates 0a53e6fb0988998d650eb9a12ed35e4c0c0edcb9
S: 99cc7ddcb0416f4a668e826de3911a3c094190ac 192.168.4.55:6355
   slots: (0 slots) slave
   replicates 57d4fadf4a3bbced11449af9bb04a262557f233b
S: 1d5eec748a1c391c34f1bd9cd278f4f0527c8cdb 192.168.4.56:6356
   slots: (0 slots) slave
   replicates 6881739d2401f0b02db9907359d44f48ff83195f
M: 6881739d2401f0b02db9907359d44f48ff83195f 192.168.4.52:6352
   slots:5461-10922 (5462 slots) master
   1 additional replica(s)
M: 0a53e6fb0988998d650eb9a12ed35e4c0c0edcb9 192.168.4.53:6353
   slots:10923-16383 (5461 slots) master
   1 additional replica(s)
[OK] All nodes agree about slots configuration.
>>> Check for open slots...
>>> Check slots coverage...
[OK] All 16384 slots covered.
[root@host57 ~]# 
3 检测集群
	]# redis-trib.rb  info  192.168.4.56:6356
	]# redis-trib.rb  check  192.168.4.56:6356
	
4 测试配置 
	4.1 访问集群 ,存取数据
	host50 ~]# redis-cli  -c  -h 192.168.4.54 -p 6354
	> set  x  101
        > set  y  102
	> set  z  103
	> set  i  104
	> set  j  108
	> set  k  109
	> get x
	> get z
 
	hash slot 的 作用 ？

	4.2 故障切换测试
		52~]# redis-cli  -h 192.168.4.52 -p 6352 shutdown
		57~]# redis-ib.rb check 192.168.4.53:6353

		50 ~]# redis-cli  -c  -h 192.168.4.56 -p 6356
		> set a1 99
		> set a2 88
		> set a3 101

		52~]# /etc/init.d/redis_6379 start

		57~]# redis-ib.rb info 192.168.4.53:6353
		57~]# redis-ib.rb check 192.168.4.53:6353


		50 ~]# redis-cli  -c  -h 192.168.4.52 -p 6352
		
5 管理集群
	 在主机 58 和  59 上， 运行redis服务 且启用的集群配置
               服务使用的ip  192.168.4.58/59
	       服务使用的端口        6358/6359

         5.1 添加服务器
		1  添加master角色服务器  192.168.4.58
			 1.1 运行redis服务 且启用的集群配置
			 1.2 在管理主机添加新服务器
				添加master主机
host57 ~]# redis-trib.rb  add-node 192.168.4.58:6358 192.168.4.53:6353
host57 ~]# redis-trib.rb info 192.168.4.53:6353

				分配hash槽（slots） 
host57 ~]# redis-trib.rb reshard 192.168.4.53:6353
移出hash槽个数
接收hash槽主机ID
移出hash槽主机ID
同意配置

		2  添加slave角色服务器  192.168.4.59
			1 运行redis服务，并启用集群配置
			2 在管理主机上添加slave 角色服务器
				
[root@host57 ~]# redis-trib.rb add-node --slave  192.168.4.59:6359 192.168.4.51:6351

[root@host57 ~]# redis-trib.rb info 192.168.4.51:6351
[root@host57 ~]# redis-trib.rb check 192.168.4.51:6351


	 5.2 删除服务器
		1  删除master角色服务器
			释放hash槽
host57 ~]# redis-trib.rb reshard 192.168.4.53:6353
指定移出slots   个数
指定接收slots   主机ID
指定移出slots   主机ID
done
yes
			移除主机
[root@host57 ~]# redis-trib.rb info 192.168.4.53:6353

                2  删除slave角色服务器
		
[root@host57 ~]# redis-trib.rb  check  192.168.4.53:6353

[root@host57 ~]# redis-trib.rb  del-node  192.168.4.53:6353 9e02c2d96176b54afeb720c9b83724d402abfb63

[root@host57 ~]# redis-trib.rb  info  192.168.4.53:6353


[root@host59 ~]# netstat  -utnlp  | grep  redis-server

		3 在管理主机平均分配hash槽
			
[root@host57 ~]# redis-trib.rb rebalance 192.168.4.53:6353
[root@host57 ~]# redis-trib.rb info 192.168.4.53:6353

	     把删除的服务器再添加到集群里
		[root@host58 ~ ]# /etc/init.d/redis_6379  start

		[root@host58 ~]# redis-cli  -h 192.168.4.58  -p 6358
		192.168.4.58:6358> CLUSTER RESET
		OK

		192.168.4.58:6358> cluster info
		cluster_state:fail

[root@host57 ~]# redis-trib.rb add-node  192.168.4.58:6358  192.168.4.53:6353
[root@host57 ~]# redis-trib.rb reshard 192.168.4.53:6353
[root@host57 ~]# redis-trib.rb info 192.168.4.53:6353

		把集群中的主机恢复为独立的数据库服务器。
			1 停止redis服务
			2 清空数据库目录
			3 禁用集群配置
			4 启动服务
			5 查看集群信息（是禁用的） 

+++++NoSQL_DAY03
1 Redis主从复制
	> info  replication
	> slaveof 主ip   主端口
	> slaveof no one

	永久配置	
	 ]# vim /etc/redis/6379.conf
	   slaveof  主ip   主端口
	 :wq

         或
	> slaveof 主ip   主端口
	> config set masterauth 123456  指定主服务器密码
	> config rewrite



2 持久化
	2.1 RDB
		RDB简介？
		RDB相关配置？
		使用RDB恢复数据？
		RDB优点与缺点?


	2.2 AOF
		AOF简介？
		AOF相关配置？
		使用AOF恢复数据？
		AOF优点与缺点?

3 数据类型 : (字符类型  列表类型  hash类型 集合类型 有序集合)
	字符类型命令的使用
	
1G=1024M
1M=1024K
1K=1024bytes
1bytes=8位
1bit=0/1

	setbit x 1  0
	setbit x 2  1
	setbit x 3  0
	setbit x 4  1
	setbit x 5  1
	setbit x 6  0
	setbit x 7  1
	setbit x 7  1
		
               x 01011011	

	      bitcount x 


	列表类型命令的使用
		list: 一个key可以有多个值,是一个字符队列,先进后出.


	hash类型命令的使用
		hash: 一个key可对应多个field，一个field对应一个value
			更能节省内存
			是一个string类型的field和value的映射表

#########################监控与服务安全########################
监控 zabbix监控服务的使用（2天）
++++++SECURITY_day01
一、Zabbix基础
	1.1 相关概念？
	1.2 Zabbix介绍
	1.3 搭建Zabbix
		1.3.1 部署zabbix服务运行环境LNMP
			1 安装nginx及其依赖包
			2 安装mariadb
			3 安装php
			4 安装php-fpm
			5 修改nginx.conf文件
			6 启动nginx服务
			7 启动mariadb服务
			8 启动php-fpm服务
			9 编写test.php文件测试配置
			10 在真机打开浏览器访问2.5 主机的test.php文件
		
		1.3.2 部署Zabbix 
			1 安装源码Zabbix
			2 创建数据库与数据库账户
			3 上线web页面
			4 修改nginx配置让php的网页页面可以被正常访问,要重启nginx服务
			
			5 安装初始化配置依赖的软件、及修改php的参数

			6 访问页面做初始化配置
			http://192.168.2.5/setup.php
			  cat /usr/local/nginx/html/conf/zabbix.conf.php
	
			7登陆管理页面
			 管理员 admin
			 密  码 zabbix
				7.1  修改语言
				7.2  修改登陆密码
        	1.3.3 启动zabbix服务
			1 修改配置文件
				]# vim /usr/local/etc/zabbix_server.conf
			2 启动服务
			3 查看服务信息
 
二、Zabbix监控服务
	2.1 基础监控: 监控主机: 监控网站服务192.168.2.100
		1 配置客户端 192.168.2.100
			1 安装zabbix软件

			2  修改配置文件

			3 启动zabbix_agentd服务

			4 查看服务状态

		2 配置服务器 192.168.2.5
			登陆管理页面做如下操作：
				1 添加监控主机
				2 选择监控模板
				3 查看监控数据


	2.2 自定义监控项: 在客户端定义命令，给监控服务器。
			1 配置客户端 192.168.2.100
				1.1 启用自定义监控项功能
				1.2 定义监控命令
				1.3 重启动服务
				1.4 测试定义的命令

			2 配置监控服务器 192.168.2.5
				2.1 登陆管理页面做如下操作：
					1 创建监控模板 ATMP1
					2 创建应用集   yyj1
					3 创建监控项   名字 对应的命令
					4 使用新模板ATMP1 监控主机100
					5 查看监控数据

		
      练习：2.5 监控主机192.168.2.203 系统的总用户数量 
		配置客户端 192.168.2.203
			1.安装源码zabbix软件
			2 修改zabbix_agentd.conf文件
			3 启动服务
			4 启用自定义监控项功能
			5 定义监控命令
			6 重启服务
			7 测试命令

		配置监控服务器192.168.2.5
			登陆管理页面做如下配置：
				1 添加监控主机 192.168.2.203
				2 创建监控模板 ATMP2
				3 创建应用集   yyj1
				4 创建监控项   名字 对应的命令
				5 使用新模板ATMP2 监控主机203
				6 查看监控数据
++++++SECURITY_day02
一、Zabbix报警机制
	2.1 配置触发器
		名称--->表达式 

	2.2 报警动作
		名称---->具体的操作
			 发邮件
			 发短信
			 发即时消息

		1 准备邮件服务
		2 登陆管理页面做如下配置：
			1 指定邮件服务器
			2 指定收件人

			3 创建动作  act1
			4 触发器被触发后查看zabbix用户是否收到邮件
二、Zabbix进阶操作
	2.1 自动发现
		自动发现介绍？
		为什么要使用？
		怎么配置？
			1 创建发现规则 rule1
				名称  条件

			2 创建动作 act2

				名称  具体操作

		验证配置:登陆Zabbix服务器的Web页面，查看主机列表

      2.2 主被动监控
		zabbix服务的监控模式分为：主动监控 和 被动监控（默认）
		主动监控介绍？
		被动监控介绍？
		配置主动监控，步骤如下：
			1 配置客户端 192.168.2.202
				1.1 安装zabbix软件
				1.2 修改主配置，使其以主动模式配置
				1.3 启动服务
				1.4 查看进程
 
			2 配置服务器 192.168.2.5
				登陆管理页面做如下配置：
					1 克隆模板 名ATMP4
					2 修改模板里监控项的模式为主动
					3 添加监控主机
					4 选择监控模板
					5 查看监控数据


      2.3 拓扑图与聚合图形
	   2.3.1 拓扑图: 在zabbix的web页面上绘制公司的网络结构，
                         可以快速了解服务器架构


	   2.3.2 聚合图形: 在1张网页页面显示多台主机的监控数据

	
三、监控案例
	3.1 监控nginx服务
]#vim /usr/local/bin/nginx_statu.sh
#!/bin/bash
     case $1 in
       "Active")
          curl  -s http://localhost/status | awk -F ":" 'NR==1{print $2}' ;;
       "requests")
          curl  -s http://localhost/status | awk  'NR==3{print $1}' ;;
       "Waiting")
         curl  -s http://localhost/status | awk  'NR==4{print $6}' ;;
esac
:wq

]# chmod +x  /usr/local/bin/nginx.sh

[root@web200 zabbix_agentd.conf.d]# cat x.conf 
UserParameter=nginx_status[*],/usr/local/bin/nginx_statu.sh $1
:wq

   
        登陆管理页面做如下配置：
		1 创建新监控模板 ATMP4
		2 创建应用集 yyj1
		3 创建监控项
			名称   命令
		4 使用新模板ATMP4监控主机200
		5 查看监控数据

	3.2 监控tcp状态
		TCP标记   SYN  ACK  FIN
		连接状态  SYN_SENT  SYN_RCVD ESTABLISHED
			  FIN_WAIT1  CLOSE_WAIT LAST_ACK  FIN_WAIT2  
                          TIME_WAIT

 


		登陆管理页面做如下配置：
                1 在监控模板 ATMP4  创建应用集 yyj2
                2 创建监控项
                        名称   命令
                3 使用新模板ATMP4监控主机200
                4 查看监控数据

	3.3 其他监控
		

服务安全（4天）
系统安全
数据安全
服务安全
网络安全































