rsync同步操作
• 命令用法
– rsync [选项...] 源目录      目标目录

• 同步与复制的差异
– 复制:完全拷贝源到目标
– 同步:增量拷贝,只传输变化过的数据


同步控制
• rsync操作选项
– -n:测试同步过程,不做实际修改
– --delete:删除目标文件夹内多余的文档
– -a:归档模式,相当于-rlptgoD
– -v:显示详细操作信息
– -z:传输过程中启用压缩/解压


[root@svr7 ~]# mkdir /abc
[root@svr7 ~]# mkdir /dir
[root@svr7 ~]# cp /etc/fstab /etc/passwd  /etc/shadow  /abc/
[root@svr7 ~]# ls /abc/

[root@svr7 ~]# rsync -av /abc    /dir  #同步目录本身
[root@svr7 ~]# ls /dir

[root@svr7 ~]# rsync -av /abc/    /dir  #同步目录内容
[root@svr7 ~]# ls /dir

[root@svr7 ~]# rsync -av --delete  /abc/    /dir
[root@svr7 ~]# ls /dir
[root@svr7 ~]# touch /abc/{1..5}.txt
[root@svr7 ~]# rsync -av --delete  /abc/    /dir
[root@svr7 ~]# ls /dir

####################################################
rsync+SSH同步

• 与远程的 SSH目录保持同步
– 下行:rsync [...]   user@host:远程目录      本地目录
– 上行:rsync [...]   本地目录         user@host:远程目录

虚拟机A:
]# rsync -av --delete  /abc/  root@192.168.4.207:/opt/
虚拟机B:
]#  ls  /opt

虚拟机A:
]# touch /abc/haha.txt
]# rsync -av --delete  /abc/  root@192.168.4.207:/opt/
虚拟机B:
]#  ls  /opt

#######################################################                                           
实时同步数据
一  部署公钥(锁)与私钥(钥匙),实现ssh无密码的验证
虚拟机A:
1.生成公钥(锁)与私钥(钥匙)
[root@svr7 ~]# ssh-keygen  #一路回车
Generating public/private rsa key pair.
Enter file in which to save the key (/root/.ssh/id_rsa):        #私钥存放的路径       
Enter passphrase (empty for no passphrase):    #密码为空
Enter same passphrase again:            #确认密码为空

[root@svr7 ~]# ls /root/.ssh/   #公钥与私钥生成的路径
  id_rsa(私钥)   id_rsa.pub(公钥)
   known_hosts(记录曾经远程管理过的机器)
    authorized_keys(另一台机器传递过来的公钥)

2.传递公钥到虚拟机B
]# ssh-copy-id root@192.168.4.207

]# touch /abc/xixi.txt
]# rsync -av --delete /abc/  root@192.168.4.207:/opt/



二  安装inotify-tools软件,监控目录内容变化

1.具备inotify-tools软件,将软件包从真机传递到虚拟机A
   
]$ ls /linux-soft/01/
]$ scp /linux-soft/01/tools.tar.gz   root@192.168.4.7:/root/

2.虚拟机A进行tar解包
[root@svr7 ~]# tar -xf /root/tools.tar.gz -C /opt/
[root@svr7 ~]# ls /opt/
[root@svr7 ~]# ls /opt/tools/

]# tar -xf /opt/tools/inotify-tools-3.13.tar.gz -C /opt/

]# ls /opt/
]# ls /opt/inotify-tools-3.13/

步骤一：安装gcc与make开发工具                                  
[root@svr7 /]# yum -y install gcc make

步骤二：运行configure脚本进行配置
]# cd  /opt/inotify-tools-3.13
]# ./configure 

步骤三：进行编译make                 
]# cd  /opt/inotify-tools-3.13
]# make

步骤四：进行运行安装make install
]# cd  /opt/inotify-tools-3.13
]# make install
]# ls /usr/local/bin/inotifywait   #监控目录内容的程序
/usr/local/bin/inotifywait


inotifywait监控                                    
• 基本用法
– inotifywait [选项] 目标文件夹
• 常用命令选项
– -m,持续监控(捕获一个事件后不退出)
– -r,递归监控、包括子目录及文件
– -q,减少屏幕输出信息
– -e,指定监视的 modify、move、create、delete、attrib 等事件类别

三  书写同步的脚本
      for循环:适合书写有次数的循环
      while循环:适合书写不定次数的循环,死循环体系结构

   格式:   while  [条件]
        do
                 重复执行的代码
        done

[root@svr7 /]# vim /root/rsync.sh
 #!/bin/bash
 while inotifywait  -rqq  /abc/ 
 do
  rsync -a --delete /abc/  root@192.168.4.207:/opt/ 
 done

[root@svr7 /]# chmod +x /root/rsync.sh  

[root@svr7 /]# /root/rsync.sh &     #放入后台运行
[root@svr7 /]# jobs         #查看后台运行进程
 
######################################################
PATH变量应用: 提供命令程序的搜寻路径

[root@cobbler ~]# echo $PATH
/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin

[root@cobbler ~]# vim /opt/hello.sh
#!/bin/bash
echo hello haha
[root@cobbler ~]# chmod +x /opt/hello.sh 

[root@cobbler ~]# /opt/hello.sh

[root@cobbler /]# cp /opt/hello.sh  /usr/bin
[root@cobbler /]# hello.sh 

######################################################
权限掩码,创建目录或文件默认权限有关

[root@cobbler ~]# umask 
0022
[root@cobbler ~]# umask 077
[root@cobbler ~]# umask 
0077
[root@cobbler ~]# mkdir /opt/nsd03
[root@cobbler ~]# ls -ld /opt/nsd03

[root@cobbler ~]# umask 022
[root@cobbler ~]# umask 
[root@cobbler ~]# mkdir /opt/nsd04
[root@cobbler ~]# ls -ld /opt/nsd04

####################################################
systemd介绍

init程序的作用
• Linux系统和服务管理器
– 是内核引导之后加载的第一个初始化进程(PID=1)
– 负责掌控整个Linux的运行/服务资源组合

systemd
• 一个更高效的系统&服务管理器
– 开机服务并行启动,各系统服务间的精确依赖
– 配置目录:/etc/systemd/system/
– 服务目录:/lib/systemd/system/
– 主要管理工具:systemctl

对于服务的管理
 systemctl restart  服务名    #重起服务
 systemctl start    服务名    #开启服务
 systemctl stop     服务名    #停止服务
 systemctl status   服务名    #查看服务当前的状态
 
 systemctl enable   服务名      #设置服务开机自启动
 systemctl disable  服务名      #设置服务不开机自启动




###################################################
RHEL6 运行级别     
  
         0：关机    
         1：单用户模式（基本功能的实现，破解Linux密码） 
	 2：多用户字符界面（不支持网络）      
	 3：多用户字符界面（支持网络）服务器默认的运行级别    
	 4：未定义
	 5：图形界面  
	 6：重起    
   
    切换运行级别：init  5  



RHEL7 运行模式 

   字符模式：multi-user.target
   图形模式：graphical.target

[student@room9pc01 ~]$ rht-vmctl reset classroom
[student@room9pc01 ~]$ rht-vmctl reset server

虚拟机cobbler：当前直接切换到字符模式
[root@cobbler /]# systemctl isolate multi-user.target 
虚拟机cobbler：当前直接切换到图形模式
[root@cobbler /]# systemctl isolate graphical.target

虚拟机cobbler：查看每次开机默认进入模式
[root@cobbler /]# systemctl get-default
graphical.target

虚拟机cobbler：设置永久策略，每次开机自动进入multi-user.target
# systemctl set-default multi-user.target
# reboot 

#################################################


















