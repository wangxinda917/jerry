DNS查询的工作方式
递归查询：客户端发送请求给首选DNS服务器，首选DNS服务器与其他DNS服务器进行交互，最终将解析结果带回来

迭代查询：首选DNS服务器与其他DNS服务器进行交互

######################################################
缓存DNS概述，缓存解析记录，加快解析速度

配置要点
• 基本配置步骤
– 1. 建立 named.conf 主配置文件
—— 设置 forwarders { 公共DNS; }; 转发器
– 2. 启动named服务
– 3. 验证缓存DNS服务器



虚拟机A：真正的DNS服务器
虚拟机B：构建为缓存DNS服务器
虚拟机C：客户端验证

构建虚拟机C：
 1.配置主机名：svr10.tedu.cn
 2.配置IP地址：192.168.4.10/24

[student@room9pc01 ~]$ clone-vm7 
Enter VM number: 4
Creating Virtual Machine disk image......	[OK]
Defining new virtual machine......		[OK]
[student@room9pc01 ~]$ 

虚拟机B                                
]# vim /etc/named.conf 
 options {
        directory       "/var/named";
        forwarders {  192.168.4.7;  };  #转发给主DNS服务器
 };
]# systemctl restart named

虚拟机C：测试
]# echo nameserver 192.168.4.207 > /etc/resolv.conf 
]# cat /etc/resolv.conf
]# nslookup www.qq.com
Server:		192.168.4.207
Address:	192.168.4.207#53

Non-authoritative answer:    #非权威解答
Name:	www.qq.com
Address: 3.3.3.3


####################################################
Split分离解析
– 为客户端提供最近的服务器
– 能够区分客户机的来源地址
– 为不同类别的客户机提供不同的解析结果(IP地址)


不同类别的客户机，请求同一个域名的解析结果，DNS服务器给出的结果不同


案例需求及要点
• 环境及需求
– 权威DNS:svr7.tedu.cn 192.168.4.7
– 负责区域:tedu.cn
– A记录分离解析 —— 以 www.tedu.cn 为例

客户机来自 解析结果
   192.168.4.207 -----------》 192.168.4.100
   其他地址  -----------》  1.2.3.4


BIND的view视图
• 根据源地址集合将客户机分类
– 不同客户机获得不同结果(待遇有差别)
– 分类要合理，每一个客户端都要找到自己的类别
– 分类进行匹配时，由上倒下依次进行匹配，原则：匹配及停止                        
– 所有的zone都必须在view中
虚拟机A：
 ]# vim  /etc/named.conf
  options {
        directory       "/var/named";
  };
  view "abc" {                           #分类的名称
   match-clients {  192.168.4.207;  };   #匹配客户端来源IP地址
   zone "tedu.cn" IN {
        type master;
        file "tedu.cn.zone";   #书写解析结果位 192.168.4.100
   };
 };
  view "nsd" {                        #分类的名称
   match-clients {  any;  };          #匹配客户端来源IP地址
   zone "tedu.cn" IN {
        type master;
        file "tedu.cn.other";  #书写解析结果位 1.2.3.4
   };
 };
 ]# cd /var/named/
 ]# vim tedu.cn.zone 
 tedu.cn.  NS    svr7
 svr7      A     192.168.4.7
 www       A     192.168.4.100

 ]# cp -p tedu.cn.zone   tedu.cn.other
 ]# vim tedu.cn.other
 tedu.cn.  NS    svr7
 svr7      A     192.168.4.7
 www       A     1.2.3.4
                          
 ]# systemctl restart named

######################################################
多区域的分离解析

案例需求及要点
• 环境及需求
– 权威DNS: 192.168.4.7
– 负责区域:tedu.cn  qq.com
– A记录分离解析 —— 以 www.tedu.cn   www.qq.com为例

客户机来自 解析结果
   192.168.4.207 -----www.tedu.cn------》 192.168.4.100
     其他地址  -----www.tedu.cn------》  1.2.3.4

   192.168.4.207 -----www.qq.com------》 192.168.4.200
     其他地址  -----www.qq.com------》  10.20.30.40

注意：每一个view中，zone的个数  及 zone负责的域名 保持一致
虚拟机A:
]# vim  /etc/named.conf
 options {
        directory       "/var/named";
 };
 view "abc" {
  match-clients {  192.168.4.207;  };
  zone "tedu.cn" IN {
        type master;
        file "tedu.cn.zone";  #解析结果为192.168.4.100
  };
  zone "qq.com" IN {
        type master;
        file "qq.com.zone";   #解析结果为192.168.4.200
  };
 };

 view "nsd" {
  match-clients {  any;  };
  zone "tedu.cn" IN {
        type master;
        file "tedu.cn.other"; #解析结果为1.2.3.4
  };
  zone "qq.com" IN {
        type master;
        file "qq.com.other";  #解析结果为10.20.30.40
  };
 };
[root@svr7 named]# cd /var/named
[root@svr7 named]# vim qq.com.zone 
 qq.com.   NS    svr7
 svr7      A     192.168.4.7
 www       A     192.168.4.200
[root@svr7 named]# cp -p qq.com.zone qq.com.other
[root@svr7 named]# vim qq.com.other
 qq.com.   NS    svr7
 svr7      A     192.168.4.7
 www       A     10.20.30.40
[root@svr7 /]# systemctl restart named

#####################################################
acl地址列表
• 为大批量的客户机地址建立列表
– 调用时指定列表名即可,列表名 any 可匹配任意地址
– 根据view调用的顺序,“匹配即停止”

  acl "liantong" {
    IP地址1; IP地址2; .. ..
        网段1; 网段2; .. ..
    .. ..
    };

[root@svr7 /]# vim /etc/named.conf 

acl "dc" { 192.168.4.207; 192.168.4.1; 192.168.4.2; 192.168.4.3; 192.168.4.5; 192.168.7.0/24; };

view "abc" {
  match-clients {  dc;  };
..........

#######################################################
RAID磁盘阵列

RAID阵列概述
• 廉价冗余磁盘阵列
– Redundant Arrays of Inexpensive Disks
– 通过硬件/软件技术,将多个较小/低速的磁盘整合成一个大磁盘
– 阵列的价值:提升I/O效率、硬件级别的数据冗余
– 不同RAID级别的功能、特性各不相同

• RAID 0,条带模式
– 同一个文档分散存放在不同磁盘
– 并行写入以提高效率
– 至少需要两块磁盘组成

• RAID 1,镜像模式
– 一个文档复制成多份,分别写入不同磁盘
– 多份拷贝提高可靠性,效率无提升
– 至少需要两块磁盘组成


• RAID5,高性价比模式                          
– 相当于RAID0和RAID1的折中方案
– 需要至少一块磁盘的容量来存放校验数据
– 至少需要三块磁盘组成

• RAID6,高性价比/可靠模式
– 相当于扩展的RAID5阵列,提供2份独立校验方案
– 需要至少两块磁盘的容量来存放校验数据
– 至少需要四块磁盘组成

• RAID 0+1/RAID 1+0
– 整合RAID 0、RAID 1的优势
– 并行存取提高效率、镜像写入提高可靠性
– 至少需要四块磁盘组成
######################################################
进程管理

   程序： 静态的代码   占用磁盘空间

   进程： 动态执行的代码   占用CPU与内存

   父进程与子进程    进程的结构：树型结构

    僵尸进程       孤儿进程
   
    进程编号：PID

查看进程树

  systemd:所有进程的父进程，上帝进程

• pstree — Processes Tree   结构鲜明
– 格式:pstree [选项] [PID或用户名]

• 常用命令选项
– -a:显示完整的命令行
– -p:列出对应PID编号
[root@svr7 /]# pstree            #查看整个进程树
[root@svr7 /]# pstree  lisi      #查看lisi用户所产生的进程
[root@svr7 /]# pstree -p lisi    #列出对应PID编号
[root@svr7 /]# pstree -ap lisi   #显示完整的命令行

• ps aux 操作
– 列出正在运行的所有进程,显示的信息非常的全面

用户 进程ID %CPU %内存 虚拟内存 固定内存 终端 状态 起始时间 CPU时间 程序指令


• ps -elf 操作
– 列出正在运行的所有进程,显示进程 父进程

  PPID： 父进程的PID

统计行数                                                       
[root@svr7 /]# wc -l /etc/passwd
23 /etc/passwd

[root@svr7 /]# find /etc/  -name "*tab" 
[root@svr7 /]# find /etc/  -name "*tab"  |  wc -l

[root@svr7 /]# ps aux     #显示正在运行的所有进程，详细信息
[root@svr7 /]# ps -elf    #显示正在运行的所有进程，具有父进程信息

[root@svr7 /]# ps aux | wc -l    #统计正在运行的进程有多少个
[root@svr7 /]# ps -elf | wc -l   #统计正在运行的进程有多少个

进程动态排名
• top 交互式工具
– 格式:top [-d 刷新秒数] [-U 用户名]
 
     按P(大写)进行CPU的排序
     按M(大写)进行内存的排序

检索进程
• pgrep — Process Grep
– 用途:pgrep [选项]... 查询条件
• 常用命令选项
– -l:输出进程名,而不仅仅是 PID
– -U:检索指定用户的进程
– -x:精确匹配完整的进程名

[root@svr7 /]# pgrep -l log
[root@svr7 /]# pgrep -l a

[root@svr7 /]# pgrep -U  lisi
[root@svr7 /]# pgrep -lU  lisi
[root@svr7 /]# pstree -ap  lisi

[root@svr7 /]# top  -d  1     #每隔1秒刷新一次

######################################################
控制进程

进程放入后台：在命令行末尾添加“&”符号,正在运行放入后台

• Ctrl + z 组合键
– 挂起当前进程(暂停并转入后台)
• jobs 命令
– 查看后台任务列表
• fg 命令
– 将后台任务恢复到前台运行
• bg 命令
– 激活后台被挂起的任务

[root@svr7 ~]# sleep 1000 &   #正在运行放入后台
[root@svr7 ~]# jobs           #查看后台进程信息

[root@svr7 ~]# sleep 800      
^Z                          #按Ctrl + z 暂停放入后台
[2]+  已停止               sleep 800
[root@svr7 ~]# jobs           #查看后台进程信息     
[root@svr7 ~]# bg 2        #将后台编号为2的进程继续运行
[root@svr7 ~]# jobs 
[root@svr7 ~]# fg 1        #将后台编号为1的进程恢复到前台
sleep 1000
^C                      #终止正在运行的进程
[root@svr7 ~]# jobs  
[root@svr7 ~]# fg 2     #将后台编号为2的进程恢复到前台
sleep 800
^C                      #终止正在运行的进程
[root@svr7 ~]# jobs




杀死进程
• 干掉进程的不同方法
– Ctrl+c 组合键,中断当前命令程序
– kill [-9] PID... 、kill [-9] %后台任务编号
– killall [-9] 进程名...
– pkill 查找条件

[root@svr7 ~]# sleep 1000 &       
[root@svr7 ~]# sleep 2000 &
[root@svr7 ~]# sleep 3000 &
[root@svr7 ~]# sleep 4000 &
[root@svr7 ~]# jobs           
[root@svr7 ~]# jobs -l       #查看后台运行的进程，显示PID编号

[root@svr7 ~]# kill    4192
[root@svr7 ~]# jobs -l

[root@svr7 ~]# jobs -l
[root@svr7 ~]# kill -9 4193

[root@svr7 ~]# jobs -l
[root@svr7 ~]# killall  sleep
[root@svr7 ~]# jobs -l
########################################################
日志管理

日志的功能
• 系统和程序的“日记本”
– 记录系统、程序运行中发生的各种事件
– 通过查看日志,了解及排除故障
– 信息安全控制的“依据”

内核及系统日志
• 由系统服务rsyslog统一记录/管理
– 日志消息采用文本格式
– 主要记录事件发生的时间、主机、进程、内容


• 常见的日志文件
	/var/log/messages 记录内核消息、各种服务的公共消息
	/var/log/dmesg    记录系统启动过程的各种消息
	/var/log/cron     记录与cron计划任务相关的消息
	/var/log/maillog  记录邮件收发相关的消息
	/var/log/secure   记录与访问限制相关的安全消息


日志分析

• 通用分析工具
– tail、tailf、less、grep等文本浏览/检索命令
– awk、sed等格式化过滤工具

  tailf：实时跟踪日志消息


用户登录分析
• users、who、w 命令
– 查看已登录的用户信息,详细度不同
  pts:图形命令行界面

• last、lastb 命令
– 查看最近登录成功/失败的用户信息

[root@svr7 ~]# users
[root@svr7 ~]# who
[root@svr7 ~]# w

[root@svr7 ~]# last -2   #最近登陆成功的俩条信息
[root@svr7 ~]# lastb -2  #最近登陆失败的俩条信息

######################################################
日志消息的优先级
• Linux内核定义的事件紧急程度
– 分为 0~7 共8种优先级别
– 其数值越小,表示对应事件越紧急/重要

  0  EMERG（紧急）          会导致主机系统不可用的情况
  1  ALERT（警告）          必须马上采取措施解决的问题
  2  CRIT（严重）	         比较严重的情况
  3  ERR（错误）	        运行出现错误
  4  WARNING（提醒）      可能会影响系统功能的事件
  5  NOTICE（注意）        不会影响系统但值得注意
  6  INFO（信息）	         一般信息
  7  DEBUG（调试）          程序或系统调试信息等


使用journalctl工具
• 提取由 systemd-journal 服务搜集的日志
– 主要包括内核/系统日志、服务日志

– journalctl -xe    #重点掌握

• 常见用法
– journalctl | grep 关键词
– journalctl -u 服务名   [-p 优先级]
– journalctl -n 消息条数
– journalctl --since="yyyy-mm-dd HH:MM:SS" --
until="yyyy-mm-dd HH:MM:SS"

######################################################

































































